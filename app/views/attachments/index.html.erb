<% content_for :title, "Attachments" %>
<h2>My files</h2>
<div style="text-align: right; margin: 30px">
  <a href="<%= new_attachment_path %>" class="new-attachment-btn">+ New attachment</a>
</div>

<table>
  <thead>
    <tr>
      <th>ID</th>
      <th>Title</th>
      <th>Description</th>
      <th>Format</th>
      <th>File size</th>
      <th>Object URL</th>
      <th>Actions</th>
    </tr>
  </thead>
  <tbody>
    <% @attachments.each do |attachment| %>
      <tr>
        <td><%= attachment.id %></td>
        <td><%= attachment.title %></td>
        <td><%= attachment.description %></td>
        <td><%= attachment.file.content_type %></td>
        <td>
          <%= attachment.object_size %>
          
        </td>
        <td>
            <div style="display: flex; justify-content: space-between; align-items: center;">
            <%= request.base_url + '/' + attachment.tag %>
            <a href="#" onclick="copyToClipboard('<%= request.base_url + '/' + attachment.tag %>', <%= attachment.id %>); event.preventDefault();" id="copy-icon-<%=attachment.id%>">
              <i class="fa fa-copy" style="color: white;" title="click to copy!"></i>
            </a>
            </div>
          <div>          
        </td>

        <td>
          <%= link_to "Edit", edit_attachment_path(attachment) %>
          <%= link_to "Delete", attachment, method: :delete, data: { confirm: "Are you sure?" } %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>



</br></br></br></br></br></br></br></br>
<div>
  <h2>resumable JS</h2>

  <input type="file" id="fileInput" />
  <progress id="uploadProgress" value="0" max="100"></progress>
  <div id="progressText">0%</div>
</div>

<script>
  function copyToClipboard(text, attachment_id) {
    navigator.clipboard.writeText(text).then(function() {
      document.querySelector(`#copy-icon-${attachment_id} i`).className = 'fa fa-check';
      document.querySelector(`#copy-icon-${attachment_id} i`).title = "Copied!"
      setTimeout(function() {
        document.querySelector(`#copy-icon-${attachment_id} i`).className = 'fa fa-copy';
        document.querySelector(`#copy-icon-${attachment_id} i`).title = "click to copy!"
        
      }, 2000);
    }).catch(function(error) {
    console.error('Error copying text: ', error);
    });
  }

  document.addEventListener("DOMContentLoaded", function () {
    const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute("content");

    const r = new Resumable({
      target: "/uploads",
      chunkSize: 3 * 1024 * 1024, // 2MB per chunk
      simultaneousUploads: 4, // Parallel chunk uploads
      testChunks: false, // Skip checking existing chunks
      throttleProgressCallbacks: 1,
      maxChunkRetries: 3,
      headers: { "X-CSRF-Token": csrfToken }
    });

    r.assignBrowse(document.getElementById("fileInput"));


    r.on("fileAdded", function (file) {
      r.upload(); // Start upload automatically
    });

    // Update progress bar
    r.on("progress", function () {
      let progress = Math.floor(r.progress() * 100);
      document.getElementById("uploadProgress").value = progress;
      document.getElementById("progressText").innerText = `${progress}%`;
    });

    // Handle upload success
    r.on("fileSuccess", function (file, message) {
      console.log("File uploaded successfully!", message);
      alert("Upload complete!");
    });

    // Handle upload failure
    r.on("fileError", function (file, message) {
      console.error("Upload failed:", message);
      alert("Upload failed. Please try again.");
    });
  });
</script>



<style>
  table {
    width: 100%;
    border-collapse: collapse;
  }

  th, td {
    border: 1px solid #ddd;
    padding: 8px;
  }

  th {
    background-color:rgb(60, 85, 116);
    text-align: left;
  }

  tr:hover {
    background-color: rgb(76, 103, 135);
  }

  th, td {
    padding: 12px;
    text-align: left;
  }

  .new-attachment-btn:hover {
    background-color: white;
    color: rgb(60, 85, 116);
  }
  .new-attachment-btn {
    border: 2px solid rgb(60, 85, 116);
    border-radius: 25px;
    background-color: transparent;
    color: rgb(255, 255, 255);
    padding: 10px 20px;
    text-decoration: none;
    transition: background-color 0.3s, color 0.3s;
  }
</style>